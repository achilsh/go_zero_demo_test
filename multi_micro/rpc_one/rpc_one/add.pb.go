// Code generated by protoc-gen-go. DO NOT EDIT.
// source: add.proto

package rpc_one

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RpcOneReq struct {
	Book                 string   `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
	Price                int64    `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcOneReq) Reset()         { *m = RpcOneReq{} }
func (m *RpcOneReq) String() string { return proto.CompactTextString(m) }
func (*RpcOneReq) ProtoMessage()    {}
func (*RpcOneReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_077cd88a1973142f, []int{0}
}

func (m *RpcOneReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcOneReq.Unmarshal(m, b)
}
func (m *RpcOneReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcOneReq.Marshal(b, m, deterministic)
}
func (m *RpcOneReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcOneReq.Merge(m, src)
}
func (m *RpcOneReq) XXX_Size() int {
	return xxx_messageInfo_RpcOneReq.Size(m)
}
func (m *RpcOneReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcOneReq.DiscardUnknown(m)
}

var xxx_messageInfo_RpcOneReq proto.InternalMessageInfo

func (m *RpcOneReq) GetBook() string {
	if m != nil {
		return m.Book
	}
	return ""
}

func (m *RpcOneReq) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type RpcOneResp struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcOneResp) Reset()         { *m = RpcOneResp{} }
func (m *RpcOneResp) String() string { return proto.CompactTextString(m) }
func (*RpcOneResp) ProtoMessage()    {}
func (*RpcOneResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_077cd88a1973142f, []int{1}
}

func (m *RpcOneResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcOneResp.Unmarshal(m, b)
}
func (m *RpcOneResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcOneResp.Marshal(b, m, deterministic)
}
func (m *RpcOneResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcOneResp.Merge(m, src)
}
func (m *RpcOneResp) XXX_Size() int {
	return xxx_messageInfo_RpcOneResp.Size(m)
}
func (m *RpcOneResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcOneResp.DiscardUnknown(m)
}

var xxx_messageInfo_RpcOneResp proto.InternalMessageInfo

func (m *RpcOneResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*RpcOneReq)(nil), "rpc_one.RpcOneReq")
	proto.RegisterType((*RpcOneResp)(nil), "rpc_one.RpcOneResp")
}

func init() { proto.RegisterFile("add.proto", fileDescriptor_077cd88a1973142f) }

var fileDescriptor_077cd88a1973142f = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x4c, 0x49, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x2a, 0x48, 0x8e, 0xcf, 0xcf, 0x4b, 0x55, 0x32,
	0xe5, 0xe2, 0x0c, 0x2a, 0x48, 0xf6, 0xcf, 0x4b, 0x0d, 0x4a, 0x2d, 0x14, 0x12, 0xe2, 0x62, 0x49,
	0xca, 0xcf, 0xcf, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x44, 0xb8, 0x58,
	0x0b, 0x8a, 0x32, 0x93, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0x20, 0x1c, 0x25, 0x19,
	0x2e, 0x2e, 0x98, 0xb6, 0xe2, 0x02, 0x21, 0x3e, 0x2e, 0x26, 0xa8, 0x2e, 0x8e, 0x20, 0xa6, 0xfc,
	0x6c, 0x23, 0x2b, 0x2e, 0x36, 0x88, 0xac, 0x90, 0x01, 0x17, 0x6b, 0x7a, 0x51, 0x6a, 0x6a, 0x89,
	0x90, 0x90, 0x1e, 0xd4, 0x46, 0x3d, 0xb8, 0x75, 0x52, 0xc2, 0x18, 0x62, 0xc5, 0x05, 0x49, 0x6c,
	0x60, 0x07, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x42, 0x07, 0x55, 0xad, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcOneClient is the client API for RpcOne service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcOneClient interface {
	Greet(ctx context.Context, in *RpcOneReq, opts ...grpc.CallOption) (*RpcOneResp, error)
}

type rpcOneClient struct {
	cc *grpc.ClientConn
}

func NewRpcOneClient(cc *grpc.ClientConn) RpcOneClient {
	return &rpcOneClient{cc}
}

func (c *rpcOneClient) Greet(ctx context.Context, in *RpcOneReq, opts ...grpc.CallOption) (*RpcOneResp, error) {
	out := new(RpcOneResp)
	err := c.cc.Invoke(ctx, "/rpc_one.RpcOne/greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcOneServer is the server API for RpcOne service.
type RpcOneServer interface {
	Greet(context.Context, *RpcOneReq) (*RpcOneResp, error)
}

// UnimplementedRpcOneServer can be embedded to have forward compatible implementations.
type UnimplementedRpcOneServer struct {
}

func (*UnimplementedRpcOneServer) Greet(ctx context.Context, req *RpcOneReq) (*RpcOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}

func RegisterRpcOneServer(s *grpc.Server, srv RpcOneServer) {
	s.RegisterService(&_RpcOne_serviceDesc, srv)
}

func _RpcOne_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOneServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_one.RpcOne/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOneServer).Greet(ctx, req.(*RpcOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcOne_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_one.RpcOne",
	HandlerType: (*RpcOneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "greet",
			Handler:    _RpcOne_Greet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "add.proto",
}
